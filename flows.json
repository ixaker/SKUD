[
    {
        "id": "694b4166d984bbb5",
        "type": "tab",
        "label": "SKUD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae3ef0c36845cb11",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "0c13d9992caafb73"
            ]
        ]
    },
    {
        "id": "232b1440f2e4b25d",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "0c13d9992caafb73"
            ]
        ]
    },
    {
        "id": "0c13d9992caafb73",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER1",
        "topic": "cmnd/SKUD/POWER1",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 500,
        "wires": []
    },
    {
        "id": "81f8270e892190f1",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "decbbc8cbef52da0"
            ]
        ]
    },
    {
        "id": "bbdd7caf52a3c51b",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 440,
        "wires": [
            [
                "decbbc8cbef52da0"
            ]
        ]
    },
    {
        "id": "decbbc8cbef52da0",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER2",
        "topic": "cmnd/SKUD/POWER2",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "7decc9337954bdca",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 380,
        "wires": [
            [
                "bc9171c8ddc98a8c"
            ]
        ]
    },
    {
        "id": "fad12e2758795282",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 380,
        "wires": [
            [
                "bc9171c8ddc98a8c"
            ]
        ]
    },
    {
        "id": "bc9171c8ddc98a8c",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER3",
        "topic": "cmnd/SKUD/POWER3",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 380,
        "wires": []
    },
    {
        "id": "6eeb487704570acc",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 320,
        "wires": [
            [
                "efa0f0a0335283f3"
            ]
        ]
    },
    {
        "id": "5be74e2ac0b0ef02",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "efa0f0a0335283f3"
            ]
        ]
    },
    {
        "id": "efa0f0a0335283f3",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER4",
        "topic": "cmnd/SKUD/POWER4",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "e690fd6d21b0c4da",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER1",
        "topic": "stat/SKUD/POWER1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 500,
        "wires": [
            [
                "1cfab1473b4eb385"
            ]
        ]
    },
    {
        "id": "eda628fa0b98dbfc",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER2",
        "topic": "stat/SKUD/POWER2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 440,
        "wires": [
            [
                "791989757180dd8e"
            ]
        ]
    },
    {
        "id": "e29f27131177b7f6",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER3",
        "topic": "stat/SKUD/POWER3",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 380,
        "wires": [
            [
                "ca559d723686b7a9"
            ]
        ]
    },
    {
        "id": "7ff9cf66faac16ac",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER4",
        "topic": "stat/SKUD/POWER4",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 320,
        "wires": [
            [
                "634fb88033af0a31"
            ]
        ]
    },
    {
        "id": "0f24d6aea688e766",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 1",
        "topic": "cmnd/SKUD_SENSOR/POWER1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 620,
        "wires": [
            [
                "40ecfe315b6f4688"
            ]
        ]
    },
    {
        "id": "40ecfe315b6f4688",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    node.warn(\"Face ID - Вход\");\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 620,
        "wires": [
            [
                "5cbae779bf744c30"
            ]
        ]
    },
    {
        "id": "9e589f7f1d83244c",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 2",
        "topic": "cmnd/SKUD_SENSOR/POWER2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 680,
        "wires": [
            [
                "d072573a127dc45b"
            ]
        ]
    },
    {
        "id": "b24d3a5505c251b2",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 3",
        "topic": "cmnd/SKUD_SENSOR/POWER3",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 860,
        "wires": [
            [
                "386cbcf4231b0649"
            ]
        ]
    },
    {
        "id": "953345ba1a0f4af8",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 4",
        "topic": "cmnd/SKUD_SENSOR/POWER4",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 920,
        "wires": [
            [
                "a7f5d1d352ca40f9"
            ]
        ]
    },
    {
        "id": "462d7be1c1f3fbe7",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 5",
        "topic": "cmnd/SKUD_SENSOR/POWER5",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 740,
        "wires": [
            [
                "f4348c6f4e0d585c"
            ]
        ]
    },
    {
        "id": "13ce67e13f1b3f26",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 6",
        "topic": "cmnd/SKUD_SENSOR/POWER6",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 800,
        "wires": [
            [
                "322fae63675eaa1a"
            ]
        ]
    },
    {
        "id": "d072573a127dc45b",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    node.warn(\"Face ID - Выход\");\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 680,
        "wires": [
            [
                "39b675f9cbd6c27c"
            ]
        ]
    },
    {
        "id": "f4348c6f4e0d585c",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = true;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"ON\"){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "a3dfb985d1c442c4"
            ]
        ]
    },
    {
        "id": "322fae63675eaa1a",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = false;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"ON\"){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 800,
        "wires": [
            [
                "a3dfb985d1c442c4"
            ]
        ]
    },
    {
        "id": "386cbcf4231b0649",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = true;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"ON\"){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 860,
        "wires": [
            [
                "8f62bb55c5d01c8a"
            ]
        ]
    },
    {
        "id": "a7f5d1d352ca40f9",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = false;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"ON\"){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 920,
        "wires": [
            [
                "8f62bb55c5d01c8a"
            ]
        ]
    },
    {
        "id": "5cbae779bf744c30",
        "type": "postgresql",
        "z": "694b4166d984bbb5",
        "name": "",
        "query": "SET TIME ZONE 'Europe/Kiev';\nSELECT *\nFROM public.iclock_transaction\nWHERE terminal_sn = 'HDP1235000001'\nORDER BY id DESC\nLIMIT 1;\n",
        "postgreSQLConfig": "b36884bb4cf65aba",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 710,
        "y": 620,
        "wires": [
            [
                "1834f44184944658"
            ]
        ]
    },
    {
        "id": "1834f44184944658",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "emp",
        "func": "\nif(msg.payload.length = 1){\n    msg.lastEvent = msg.payload[0] \n    const text = msg.lastEvent.emp_code;\n\n    global.set('lastVhod', msg.lastEvent.id);\n\n    node.status({ fill: \"green\", shape: \"ring\", text: text });\n\n    setTimeout(function () {\n        node.status({ fill: \"gray\", shape: \"ring\", text: text });\n    }, 500);\n\n    msg.url = `https://wss.qpart.com.ua/getUserByEmpCode?empCode=${text}`;\n\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 620,
        "wires": [
            [
                "3fbcc12f6e88b667"
            ]
        ]
    },
    {
        "id": "3fbcc12f6e88b667",
        "type": "got",
        "z": "694b4166d984bbb5",
        "name": "",
        "timeout": 30000,
        "x": 970,
        "y": 620,
        "wires": [
            [
                "56e607c31601551e"
            ]
        ]
    },
    {
        "id": "56e607c31601551e",
        "type": "json",
        "z": "694b4166d984bbb5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1090,
        "y": 620,
        "wires": [
            [
                "5c79297e2fdb275d",
                "54b18f99abc47d7a"
            ]
        ]
    },
    {
        "id": "3f9c352925121cb7",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Турникет - Вход",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "08135225f70da8eb",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Турникет - Выход",
        "info": "",
        "x": 110,
        "y": 500,
        "wires": []
    },
    {
        "id": "a532f40ccf554d2d",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Активация алкотестера - Вход",
        "info": "",
        "x": 150,
        "y": 260,
        "wires": []
    },
    {
        "id": "ee42b36a00f38df3",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Активация алкотестера - Выход .",
        "info": "",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "780845b0af372d23",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Реле терминала FaceID - Вход",
        "info": "",
        "x": 150,
        "y": 620,
        "wires": []
    },
    {
        "id": "e0f18546866c5e2d",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Реле терминала FaceID - Выход",
        "info": "",
        "x": 150,
        "y": 680,
        "wires": []
    },
    {
        "id": "39b675f9cbd6c27c",
        "type": "postgresql",
        "z": "694b4166d984bbb5",
        "name": "",
        "query": "SET TIME ZONE 'Europe/Kiev';\nSELECT *\nFROM public.iclock_transaction\nWHERE terminal_sn = 'CN99212360023'\nORDER BY id DESC\nLIMIT 1;\n",
        "postgreSQLConfig": "b36884bb4cf65aba",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 710,
        "y": 680,
        "wires": [
            [
                "a0ccad583385114a"
            ]
        ]
    },
    {
        "id": "a0ccad583385114a",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "emp",
        "func": "\nif(msg.payload.length = 1){\n    msg.lastEvent = msg.payload[0] \n    const text = msg.lastEvent .emp_code;\n\n    global.set('lastVuhod', msg.lastEvent.id);\n\n    node.status({ fill: \"green\", shape: \"ring\", text: text });\n\n    setTimeout(function () {\n        node.status({ fill: \"gray\", shape: \"ring\", text: text });\n    }, 500);\n\n    msg.url = `https://wss.qpart.com.ua/getUserByEmpCode?empCode=${text}`;\n\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 680,
        "wires": [
            [
                "1db5365261cc963e"
            ]
        ]
    },
    {
        "id": "1db5365261cc963e",
        "type": "got",
        "z": "694b4166d984bbb5",
        "name": "",
        "timeout": 30000,
        "x": 970,
        "y": 680,
        "wires": [
            [
                "3d20c7287b4c5993"
            ]
        ]
    },
    {
        "id": "3d20c7287b4c5993",
        "type": "json",
        "z": "694b4166d984bbb5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1090,
        "y": 680,
        "wires": [
            [
                "4405790bb49d6c3d",
                "20a989b91eb9ed6a"
            ]
        ]
    },
    {
        "id": "4405790bb49d6c3d",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "can",
        "func": "msg.user = msg.payload;\nconst text = msg.payload.canAccessWithoutAlkotester;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nnode.warn(msg.payload.name);\n\nif(text){\n    msg.topic = 'cmnd/SKUD/POWER1';\n    msg.payload = 'ON';\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "83eaeab333f5af8b"
            ]
        ]
    },
    {
        "id": "83eaeab333f5af8b",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 1350,
        "y": 680,
        "wires": []
    },
    {
        "id": "5c79297e2fdb275d",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "can",
        "func": "msg.user = msg.payload;\nconst text = msg.payload.canAccessWithoutAlkotester;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nnode.warn(msg.payload.name);\n\nif(text){\n    msg.topic = 'cmnd/SKUD/POWER3';\n    msg.payload = 'ON';\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 620,
        "wires": [
            [
                "1499fe72fba01320"
            ]
        ]
    },
    {
        "id": "1499fe72fba01320",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 1350,
        "y": 620,
        "wires": []
    },
    {
        "id": "322519aa5afef3fe",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Алкотестер на Вход - Дозвіл",
        "info": "",
        "x": 140,
        "y": 920,
        "wires": []
    },
    {
        "id": "a4a448e185aa664d",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Алкотестер на Вход - Заборона",
        "info": "",
        "x": 150,
        "y": 860,
        "wires": []
    },
    {
        "id": "6c18571f237da425",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Алкотестер на Выход - Дозвіл",
        "info": "",
        "x": 150,
        "y": 800,
        "wires": []
    },
    {
        "id": "88538cb2cc6c2e5f",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Алкотестер на Выход - Заборона",
        "info": "",
        "x": 160,
        "y": 740,
        "wires": []
    },
    {
        "id": "54b18f99abc47d7a",
        "type": "debug",
        "z": "694b4166d984bbb5",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 620,
        "wires": []
    },
    {
        "id": "20a989b91eb9ed6a",
        "type": "debug",
        "z": "694b4166d984bbb5",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 680,
        "wires": []
    },
    {
        "id": "a3dfb985d1c442c4",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "func": "const text = 'OFF';\nmsg.payload = text;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 760,
        "wires": [
            [
                "3059b0c7a7394399"
            ]
        ]
    },
    {
        "id": "8f62bb55c5d01c8a",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "func": "const text = 'OFF';\nmsg.payload = text;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 880,
        "wires": [
            [
                "9cfcdad9ddd84e41"
            ]
        ]
    },
    {
        "id": "9cfcdad9ddd84e41",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "save",
        "func": "const id = global.get('lastVhod');\n\nif (id > 0) {\n    msg.query = `UPDATE public.iclock_transaction SET alco = ${msg.alco} WHERE id = ${id};`;\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 880,
        "wires": [
            [
                "4140ae2c3c0a6347"
            ]
        ]
    },
    {
        "id": "4140ae2c3c0a6347",
        "type": "postgresql",
        "z": "694b4166d984bbb5",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b36884bb4cf65aba",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 990,
        "y": 880,
        "wires": [
            [
                "8789c0afa849d2d4"
            ]
        ]
    },
    {
        "id": "8789c0afa849d2d4",
        "type": "debug",
        "z": "694b4166d984bbb5",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 880,
        "wires": []
    },
    {
        "id": "3059b0c7a7394399",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "save",
        "func": "const id = global.get('lastVuhod');\n\nif(id > 0){\n    msg.query = `UPDATE public.iclock_transaction SET alco = ${msg.alco} WHERE id = ${id};`;\n\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 760,
        "wires": [
            [
                "bdd4ce5f0e2422a9"
            ]
        ]
    },
    {
        "id": "bdd4ce5f0e2422a9",
        "type": "postgresql",
        "z": "694b4166d984bbb5",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b36884bb4cf65aba",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 990,
        "y": 760,
        "wires": [
            [
                "1056b250ad199a7a"
            ]
        ]
    },
    {
        "id": "1056b250ad199a7a",
        "type": "debug",
        "z": "694b4166d984bbb5",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 760,
        "wires": []
    },
    {
        "id": "201361ca1858102d",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 7",
        "topic": "cmnd/SKUD_SENSOR/POWER7",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 980,
        "wires": [
            [
                "c9bc6eb72492f3a1"
            ]
        ]
    },
    {
        "id": "99402dc5b221adf7",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 8",
        "topic": "cmnd/SKUD_SENSOR/POWER8",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 1040,
        "wires": [
            [
                "9fa5975e36cc2e30"
            ]
        ]
    },
    {
        "id": "c9bc6eb72492f3a1",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = true;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    global.set('lastVuhod', 0);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "9fa5975e36cc2e30",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = false;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    global.set('lastVhod', 0);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "874e5aab6743dfc4",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Считыватель карточек на Вход",
        "info": "",
        "x": 150,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ab053fe2c5f1b051",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Считыватель карточек на Выход",
        "info": "",
        "x": 160,
        "y": 980,
        "wires": []
    },
    {
        "id": "647dd7df817b901e",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "194f82dcfdcc18ec"
            ]
        ]
    },
    {
        "id": "4297669586dc5681",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "194f82dcfdcc18ec"
            ]
        ]
    },
    {
        "id": "194f82dcfdcc18ec",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER5",
        "topic": "cmnd/SKUD/POWER5",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "fcdfad1750fa82d7",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "272fcd7c53fa9f55"
            ]
        ]
    },
    {
        "id": "a85c717b483f2e13",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "272fcd7c53fa9f55"
            ]
        ]
    },
    {
        "id": "272fcd7c53fa9f55",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER6",
        "topic": "cmnd/SKUD/POWER6",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "5c98d0120a6fa1ab",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "0f534b7fc6760dc0"
            ]
        ]
    },
    {
        "id": "33c2ed13d08f7f70",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "0f534b7fc6760dc0"
            ]
        ]
    },
    {
        "id": "0f534b7fc6760dc0",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER7",
        "topic": "cmnd/SKUD/POWER7",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 140,
        "wires": []
    },
    {
        "id": "f6c8c92e2f34bcac",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "87ae5739ed744149"
            ]
        ]
    },
    {
        "id": "de0d6f6b4858eb92",
        "type": "inject",
        "z": "694b4166d984bbb5",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "87ae5739ed744149"
            ]
        ]
    },
    {
        "id": "87ae5739ed744149",
        "type": "mqtt out",
        "z": "694b4166d984bbb5",
        "name": "POWER8",
        "topic": "cmnd/SKUD/POWER8",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1b765ae60b0b837",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "707a450eda653cbd",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER5",
        "topic": "stat/SKUD/POWER5",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 260,
        "wires": [
            [
                "1ef8ca5a2041409e"
            ]
        ]
    },
    {
        "id": "a96d45ce4fce1319",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER6",
        "topic": "stat/SKUD/POWER6",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 200,
        "wires": [
            [
                "6c2f6b15b9d6db2f"
            ]
        ]
    },
    {
        "id": "675df20ced41a1b3",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER7",
        "topic": "stat/SKUD/POWER7",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 140,
        "wires": [
            [
                "adaea57bfb86eef5"
            ]
        ]
    },
    {
        "id": "ddfce7c930b623ca",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "POWER8",
        "topic": "stat/SKUD/POWER8",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 900,
        "y": 80,
        "wires": [
            [
                "986cec366aa7b5fe"
            ]
        ]
    },
    {
        "id": "986cec366aa7b5fe",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "4c03d04c32df668f"
            ]
        ]
    },
    {
        "id": "4196d578a4829c42",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Relay",
        "info": "",
        "x": 790,
        "y": 40,
        "wires": []
    },
    {
        "id": "4c03d04c32df668f",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 80,
        "wires": []
    },
    {
        "id": "adaea57bfb86eef5",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "35c05d3121f045a1"
            ]
        ]
    },
    {
        "id": "35c05d3121f045a1",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "6c2f6b15b9d6db2f",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 200,
        "wires": [
            [
                "9a2d57b08ad18504"
            ]
        ]
    },
    {
        "id": "9a2d57b08ad18504",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "1ef8ca5a2041409e",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "ce6a414ae9b8a108"
            ]
        ]
    },
    {
        "id": "ce6a414ae9b8a108",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 260,
        "wires": []
    },
    {
        "id": "634fb88033af0a31",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 320,
        "wires": [
            [
                "970197279f420a01"
            ]
        ]
    },
    {
        "id": "970197279f420a01",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 320,
        "wires": []
    },
    {
        "id": "ca559d723686b7a9",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "30e0ea65f480f0cd"
            ]
        ]
    },
    {
        "id": "30e0ea65f480f0cd",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "791989757180dd8e",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "5705af0e1322ae7a"
            ]
        ]
    },
    {
        "id": "5705af0e1322ae7a",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 440,
        "wires": []
    },
    {
        "id": "1cfab1473b4eb385",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 500,
        "wires": [
            [
                "b6226e506d833260"
            ]
        ]
    },
    {
        "id": "b6226e506d833260",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "led",
        "func": "\nif(msg.payload === 'ON'){\n    node.status({ fill: \"green\", shape: \"ring\" });\n}else{\n    node.status({ fill: \"gray\", shape: \"ring\" });\n}\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "47c445630530cd7c",
        "type": "comment",
        "z": "694b4166d984bbb5",
        "name": "Switch",
        "info": "",
        "x": 790,
        "y": 580,
        "wires": []
    },
    {
        "id": "c1f0436851d95734",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 9",
        "topic": "cmnd/SKUD_SENSOR/POWER9",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 1100,
        "wires": [
            [
                "0c52e0db2103deb3"
            ]
        ]
    },
    {
        "id": "0c52e0db2103deb3",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = false;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    global.set('lastVhod', 0);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "b815d51948f7a9b7",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 10",
        "topic": "cmnd/SKUD_SENSOR/POWER10",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 1160,
        "wires": [
            [
                "5c99e777a446dfcf"
            ]
        ]
    },
    {
        "id": "5c99e777a446dfcf",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = false;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    global.set('lastVhod', 0);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "735a42aeab37f5c2",
        "type": "mqtt in",
        "z": "694b4166d984bbb5",
        "name": "Sensor 11",
        "topic": "cmnd/SKUD_SENSOR/POWER11",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a1b765ae60b0b837",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 1220,
        "wires": [
            [
                "9fedc9b2707de4ad"
            ]
        ]
    },
    {
        "id": "9fedc9b2707de4ad",
        "type": "function",
        "z": "694b4166d984bbb5",
        "name": "state",
        "func": "const text = msg.payload;\n\nmsg.alco = false;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: text });\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: text });\n}, 500);\n\nif(text === \"OFF\"){\n    global.set('lastVhod', 0);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "a1b765ae60b0b837",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b36884bb4cf65aba",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "10.8.0.4",
        "hostFieldType": "str",
        "port": "7496",
        "portFieldType": "num",
        "database": "biotime",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "postgres",
        "passwordFieldType": "str"
    }
]